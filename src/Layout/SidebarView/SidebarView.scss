@import '../../scss/theme.scss';

.SidebarView {
  $border-width: 0.06rem;

  display: flex;
  height: 100%;
  overflow-x: hidden; // For the border-right line, which needs to overshoot
  position: relative;

  &__content {
    flex: 1 1 auto;
    z-index: $z-index-1;
  }

  &__sidebar {
    background-color: white;
    border-right: $border-width solid $ux-gray-300;
    flex: 0 0 22.5rem;

    // Why clip-path, rather than width or transform: scaleX?
    //
    // If we used width, the content would reflow continuously during the
    // animation. We want to reveal the content in a sweep without having it
    // shuffling around randomly. This could also be avoided with an inner
    // container whose width is explicitly synced with the outermost containerâ€™s
    // clientWidth (from JS), but clip-path provides a CSS-only / no-extra-dom
    // solution that achieves the same effect.
    //
    // If we used scaleX, the content would be distended during the animation.
    //
    // In legacy agents, clip will be used instead. In Edge this will still
    // animate as intended, while in IE it will not be animated.

    &--openable {
      bottom: 0;
      clip: rect(0 0 auto 0); // IE11, Edge
      left: 0;
      overflow: hidden;
      position: absolute;
      top: 0;
      transition: clip $ux-duration-short $ux-ease-out-circ; 
      width: calc(100% + #{$border-width});
      z-index: $z-index-2;

      &.SidebarView__sidebar--open {
        clip: rect(0 auto auto 0); // IE11, Edge
        transition-timing-function: $ux-ease-in-circ;
      }

      // Everybody else: note we need to _not_ have the clip: rect() on, since
      // other browsers support that, too and it would prevent the animation
      // from working.

      @supports (clip-path: inset(0 100% 0 0)) {
        clip: auto;
        clip-path: inset(0 100% 0 0);
        transition-property: clip-path;

        &.SidebarView__sidebar--open {
          clip: auto;
          clip-path: inset(0 0 0 0);
        }
      }
    }
  }
}
